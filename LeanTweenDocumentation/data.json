{
    "project": {
        "name": "LeanTween",
        "description": "An Eficient Tweening Library for Unity3d",
        "version": "LeanTween 2.14",
        "url": "http://dentedpixel.com/developer-diary/leantween-speed-comparison-to-itween/",
        "logo": "http://s3.amazonaws.com/dentedpixel.com/LeanTween/leantween-logo.png"
    },
    "files": {
        "LeanTween.cs": {
            "name": "LeanTween.cs",
            "modules": {},
            "classes": {
                "LeanTweenType": 1,
                "LTDescr": 1,
                "LTRect": 1,
                "LTBezierPath": 1,
                "LTSpline": 1,
                "LeanTween": 1,
                "LTEvent": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "LeanTweenType": {
            "name": "LeanTweenType",
            "shortname": "LeanTweenType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 35,
            "description": "Pass this to the \"ease\" parameter in the optional hashtable, to get a different easing behavior<br><br>\n<strong>Example: </strong><br>LeanTween.rotateX(gameObject, 270.0f, 1.5f).setEase(LeanTweenType.easeInBack);"
        },
        "LTDescr": {
            "name": "LTDescr",
            "shortname": "LTDescr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 148,
            "description": "Internal Representation of a Tween<br>\n<br>\nThis class represents all of the optional parameters you can pass to a method (it also represents the internal representation of the tween).<br><br>\n<strong id='optional'>Optional Parameters</strong> are passed at the end of every method:<br> \n<br>\n&nbsp;&nbsp;<i>Example:</i><br>\n&nbsp;&nbsp;LeanTween.moveX( gameObject, 1f, 1f).setEase( <a href=\"LeanTweenType.html\">LeanTweenType</a>.easeInQuad ).setDelay(1f);<br>\n<br>\nYou can pass the optional parameters in any order, and chain on as many as you wish.<br>\nYou can also <strong>pass parameters at a later time</strong> by saving a reference to what is returned.<br>\n<br>\n&nbsp;&nbsp;<i>Example:</i><br>\n&nbsp;&nbsp;<a href=\"LTDescr.html\">LTDescr</a> d = LeanTween.moveX(gameObject, 1f, 1f);<br>\n&nbsp;&nbsp;&nbsp; ...later set some parameters<br>\n&nbsp;&nbsp;d.setOnComplete( onCompleteFunc ).setEase( <a href=\"LeanTweenType.html\">LeanTweenType</a>.easeInOutBack );<br>\n<br>\nRetrieve a <strong>unique id</strong> for the tween by using the \"id\" property. You can pass this to LeanTween.pause, LeanTween.resume, LeanTween.cancel methods<br>\n<br>\n&nbsp;&nbsp;<i>Example:</i><br>\n&nbsp;&nbsp;int id = LeanTween.moveX(gameObject, 1f, 3f).id;<br>\n&nbsp;&nbsp;LeanTween.pause( id );<br>",
            "is_constructor": 1
        },
        "LTRect": {
            "name": "LTRect",
            "shortname": "LTRect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 676,
            "description": "Animate GUI Elements by creating this object and passing the *.rect variable to the GUI method<br><br>\n<strong>Example Javascript: </strong><br>var bRect:LTRect = new LTRect( 0, 0, 100, 50 );<br>\nLeanTween.scale( bRect, Vector2(bRect.rect.width, bRect.rect.height) * 1.3, 0.25 );<br>\nfunction OnGUI(){<br>\n&nbsp; if(GUI.Button(bRect.rect, \"Scale\")){ }<br>\n}<br>\n<br>\n<strong>Example C#: </strong> <br>\nLTRect bRect = new LTRect( 0f, 0f, 100f, 50f );<br>\nLeanTween.scale( bRect, new Vector2(150f,75f), 0.25f );<br>\nvoid OnGUI(){<br>\n&nbsp; if(GUI.Button(bRect.rect, \"Scale\")){ }<br>\n}<br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x:float",
                    "description": "X location",
                    "type": "Float"
                },
                {
                    "name": "y:float",
                    "description": "Y location",
                    "type": "Float"
                },
                {
                    "name": "width:float",
                    "description": "Width",
                    "type": "Float"
                },
                {
                    "name": "height:float",
                    "description": "Height",
                    "type": "Float"
                },
                {
                    "name": "alpha:float",
                    "description": "(Optional) initial alpha amount (0-1)",
                    "type": "Float"
                },
                {
                    "name": "rotation:float",
                    "description": "(Optional) initial rotation in degrees (0-360)",
                    "type": "Float"
                }
            ]
        },
        "LTBezierPath": {
            "name": "LTBezierPath",
            "shortname": "LTBezierPath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 980,
            "description": "Manually animate along a bezier path with this class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pts",
                    "description": "A set of points that define one or many bezier paths (the paths should be passed in multiples of 4, which correspond to each individual bezier curve)",
                    "type": "Vector3 Array"
                }
            ],
            "example": [
                " \nLTBezierPath ltPath = new LTBezierPath( new Vector3[] { new Vector3(0f,0f,0f),new Vector3(1f,0f,0f), new Vector3(1f,0f,0f), new Vector3(1f,1f,0f)} );<br><br>\nLeanTween.move(lt, ltPath.vec3, 4.0f).setOrientToPath(true).setDelay(1f).setEase(LeanTweenType.easeInOutQuad); // animate <br>\nVector3 pt = ltPath.point( 0.6f ); // retrieve a point along the path"
            ]
        },
        "LTSpline": {
            "name": "LTSpline",
            "shortname": "LTSpline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 1107,
            "description": "Animate along a set of points that need to be in the format: controlPoint, point1, point2.... pointLast, endControlPoint",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pts",
                    "description": "A set of points that define the points the path will pass through (starting with starting control point, and ending with a control point)",
                    "type": "Vector3 Array"
                }
            ],
            "example": [
                " \nLTSpline ltSpline = new LTSpline( new Vector3[] { new Vector3(0f,0f,0f),new Vector3(0f,0f,0f), new Vector3(0f,0.5f,0f), new Vector3(1f,1f,0f), new Vector3(1f,1f,0f)} );<br><br>\nLeanTween.moveSpline(lt, ltSpline.vec3, 4.0f).setOrientToPath(true).setDelay(1f).setEase(LeanTweenType.easeInOutQuad); // animate <br>\nVector3 pt = ltSpline.point( 0.6f ); // retrieve a point along the path"
            ]
        },
        "LeanTween": {
            "name": "LeanTween",
            "shortname": "LeanTween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 1344,
            "description": "LeanTween is an efficient tweening engine for Unity3d<br><br>\n<a href=\"#index\">Index of All Methods</a> | <a href=\"LTDescr.html\">Optional Paramaters that can be passed</a><br><br>\n<strong id='optional'>Optional Parameters</strong> are passed at the end of every method<br> \n<br>\n<i>Example:</i><br>\nLeanTween.moveX( gameObject, 1f, 1f).setEase( <a href=\"LeanTweenType.html\">LeanTweenType</a>.easeInQuad ).setDelay(1f);<br>\n<br>\nYou can pass the optional parameters in any order, and chain on as many as you wish.<br>\nYou can also pass parameters at a later time by saving a reference to what is returned.<br>\n<br>\n<i>Example:</i><br>\n<a href=\"LTDescr.html\">LTDescr</a> d = LeanTween.moveX(gameObject, 1f, 1f);<br>\n &nbsp; ...later set some parameters<br>\nd.setOnComplete( onCompleteFunc ).setEase( <a href=\"LeanTweenType.html\">LeanTweenType</a>.easeInOutBack );<br>"
        },
        "LTEvent": {
            "name": "LTEvent",
            "shortname": "LTEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LeanTween.cs",
            "line": 3963,
            "description": "Object that describes the event to an event listener",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data:object",
                    "description": "Data that has been passed from the dispatchEvent method",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "LeanTween.cs",
            "line": 42,
            "itemtype": "property",
            "name": "linear",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 45,
            "itemtype": "property",
            "name": "easeOutQuad",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 48,
            "itemtype": "property",
            "name": "easeInQuad",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 51,
            "itemtype": "property",
            "name": "easeInOutQuad",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 54,
            "itemtype": "property",
            "name": "easeInCubic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 57,
            "itemtype": "property",
            "name": "easeOutCubic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 60,
            "itemtype": "property",
            "name": "easeInOutCubic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 63,
            "itemtype": "property",
            "name": "easeInQuart",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 66,
            "itemtype": "property",
            "name": "easeOutQuart",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 69,
            "itemtype": "property",
            "name": "easeInOutQuart",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 72,
            "itemtype": "property",
            "name": "easeInQuint",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 75,
            "itemtype": "property",
            "name": "easeOutQuint",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 78,
            "itemtype": "property",
            "name": "easeInOutQuint",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 81,
            "itemtype": "property",
            "name": "easeInSine",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 84,
            "itemtype": "property",
            "name": "easeOutSine",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 87,
            "itemtype": "property",
            "name": "easeInOutSine",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 90,
            "itemtype": "property",
            "name": "easeInExpo",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 93,
            "itemtype": "property",
            "name": "easeOutExpo",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 96,
            "itemtype": "property",
            "name": "easeInOutExpo",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 99,
            "itemtype": "property",
            "name": "easeInCirc",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 102,
            "itemtype": "property",
            "name": "easeOutCirc",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 105,
            "itemtype": "property",
            "name": "easeInOutCirc",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 108,
            "itemtype": "property",
            "name": "easeInBounce",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 111,
            "itemtype": "property",
            "name": "easeOutBounce",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 114,
            "itemtype": "property",
            "name": "easeInOutBounce",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 117,
            "itemtype": "property",
            "name": "easeInBack",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 120,
            "itemtype": "property",
            "name": "easeOutBack",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 123,
            "itemtype": "property",
            "name": "easeInOutBack",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 126,
            "itemtype": "property",
            "name": "easeInElastic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 129,
            "itemtype": "property",
            "name": "easeOutElastic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 132,
            "itemtype": "property",
            "name": "easeInOutElastic",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 135,
            "itemtype": "property",
            "name": "punch",
            "type": "Integer",
            "class": "LeanTweenType"
        },
        {
            "file": "LeanTween.cs",
            "line": 226,
            "description": "Cancel a tween",
            "itemtype": "method",
            "name": "cancel",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 280,
            "description": "Pause a tween",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 295,
            "description": "Resume a paused tween",
            "itemtype": "method",
            "name": "resume",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 311,
            "description": "Delay the start of a tween",
            "itemtype": "method",
            "name": "setDelay",
            "params": [
                {
                    "name": "float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setDelay( 1.5f );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 330,
            "description": "Set the type of easing used for the tween. <br>\n<ul><li><a href=\"LeanTweenType.html\">List of all the ease types</a>.</li>\n<li><a href=\"http://www.robertpenner.com/easing/easing_demo.html\">This page helps visualize the different easing equations</a></li>\n</ul>",
            "itemtype": "method",
            "name": "setEase",
            "params": [
                {
                    "name": "easeType:LeanTweenType",
                    "description": "the easing type to use",
                    "type": "LeanTweenType"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setEase( LeanTweenType.easeInBounce );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 347,
            "description": "Set the type of easing used for the tween with a custom curve. <br>",
            "itemtype": "method",
            "name": "setEase (AnimationCurve)",
            "params": [
                {
                    "name": "easeDefinition:AnimationCurve",
                    "description": "an <a href=\"http://docs.unity3d.com/Documentation/ScriptReference/AnimationCurve.html\" target=\"_blank\">AnimationCure</a> that describes the type of easing you want, this is great for when you want a unique type of movement",
                    "type": "AnimationCurve"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setEase( LeanTweenType.easeInBounce );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 383,
            "description": "Set the tween to repeat a number of times.",
            "itemtype": "method",
            "name": "setRepeat",
            "params": [
                {
                    "name": "repeatNum:int",
                    "description": "the number of times to repeat the tween. -1 to repeat infinite times",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 10 ).setLoopPingPong();"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 404,
            "description": "Use estimated time when tweening an object. Great for pause screens, when you want all other action to be stopped (or slowed down)",
            "itemtype": "method",
            "name": "setUseEstimatedTime",
            "params": [
                {
                    "name": "useEstimatedTime:bool",
                    "description": "whether to use estimated time or not",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 2 ).setUseEstimatedTime( true );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 417,
            "description": "Use frames when tweening an object, when you don't want the animation to be time-frame independent...",
            "itemtype": "method",
            "name": "setUseFrames",
            "params": [
                {
                    "name": "useFrames:bool",
                    "description": "whether to use estimated time or not",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat( 2 ).setUseFrames( true );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 435,
            "description": "No looping involved, just run once (the default)",
            "itemtype": "method",
            "name": "setLoopOnce",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setLoopOnce();"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 444,
            "description": "When the animation gets to the end it starts back at where it began",
            "itemtype": "method",
            "name": "setLoopClamp",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat(2).setLoopClamp();"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 458,
            "description": "When the animation gets to the end it then tweens back to where it started (and on, and on)",
            "itemtype": "method",
            "name": "setLoopPingPong",
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setRepeat(2).setLoopPingPong();"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 472,
            "description": "Have a method called when the tween finishes",
            "itemtype": "method",
            "name": "setOnComplete",
            "params": [
                {
                    "name": "onComplete:Action",
                    "description": "the method that should be called when the tween is finished ex: tweenFinished(){ }",
                    "type": "Action"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnComplete( tweenFinished );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 485,
            "description": "Have a method called when the tween finishes",
            "itemtype": "method",
            "name": "setOnComplete (object)",
            "params": [
                {
                    "name": "onComplete:Action<object>",
                    "description": "the method that should be called when the tween is finished ex: tweenFinished( object myObj ){ }",
                    "type": "Action<object>"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnComplete( tweenFinished );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 504,
            "description": "Pass an object to along with the onComplete Function",
            "itemtype": "method",
            "name": "setOnCompleteParam",
            "params": [
                {
                    "name": "onComplete:object",
                    "description": "an object that",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnComplete( tweenFinished );"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 518,
            "description": "Have a method called on each frame that the tween is being animated (passes a float value)",
            "itemtype": "method",
            "name": "setOnUpdate",
            "params": [
                {
                    "name": "onUpdate:Action<float>",
                    "description": "a method that will be called on every frame with the float value of the tweened object",
                    "type": "Action<float>"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnUpdate( tweenMoved );<br>\n<br>\nvoid tweenMoved( float val ){ }<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 547,
            "description": "Have a method called on each frame that the tween is being animated (passes a float value and a object)",
            "itemtype": "method",
            "name": "setOnUpdate (object)",
            "params": [
                {
                    "name": "onUpdate:Action<float,object>",
                    "description": "a method that will be called on every frame with the float value of the tweened object, and an object of the person's choosing",
                    "type": "Action<float,object>"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnUpdate( tweenMoved ).setOnUpdateParam( myObject );<br>\n<br>\nvoid tweenMoved( float val, object obj ){ }<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 571,
            "description": "Have a method called on each frame that the tween is being animated (passes a float value)",
            "itemtype": "method",
            "name": "setOnUpdate (Vector3)",
            "params": [
                {
                    "name": "onUpdate:Action<Vector3>",
                    "description": "a method that will be called on every frame with the float value of the tweened object",
                    "type": "Action<Vector3>"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnUpdate( tweenMoved );<br>\n<br>\nvoid tweenMoved( Vector3 val ){ }<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 590,
            "description": "Have an object passed along with the onUpdate method",
            "itemtype": "method",
            "name": "setOnUpdateParam",
            "params": [
                {
                    "name": "onUpdateParam:object",
                    "description": "an object that will be passed along with the onUpdate method",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.moveX(gameObject, 5f, 2.0f ).setOnUpdate( tweenMoved ).setOnUpdateParam( myObject );<br>\n<br>\nvoid tweenMoved( float val, object obj ){ }<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 605,
            "description": "While tweening along a curve, set this property to true, to be perpendicalur to the path it is moving upon",
            "itemtype": "method",
            "name": "setOrientToPath",
            "params": [
                {
                    "name": "doesOrient:bool",
                    "description": "whether the gameobject will orient to the path it is animating along",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.move( ltLogo, path, 1.0f ).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true).setAxis(Vector3.forward);<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 639,
            "description": "Set the point at which the GameObject will be rotated around",
            "itemtype": "method",
            "name": "setPoint",
            "params": [
                {
                    "name": "point:Vector3",
                    "description": "point at which you want the object to rotate around (local space)",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.rotateAround( cube, Vector3.up, 360.0f, 1.0f ) .setPoint( new Vector3(1f,0f,0f) ) .setEase( LeanTweenType.easeInOutBounce );<br>"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 662,
            "description": "Set the onComplete method to be called at the end of every loop cycle (also applies to the delayedCall method)",
            "itemtype": "method",
            "name": "setOnCompleteOnRepeat",
            "params": [
                {
                    "name": "isOn:bool",
                    "description": "does call onComplete on every loop cycle",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.delayedCall(gameObject,0.3f, delayedMethod).setRepeat(4).setOnCompleteOnRepeat(true);"
            ],
            "class": "LTDescr"
        },
        {
            "file": "LeanTween.cs",
            "line": 703,
            "description": "Pass this value to the GUI Methods",
            "itemtype": "property",
            "name": "rect",
            "type": "{Rect} rect:Rect Rect object that controls the positioning and size",
            "class": "LTRect"
        },
        {
            "file": "LeanTween.cs",
            "line": 1027,
            "description": "Retrieve a point along a path",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "Vector3 position of the point along the path",
                "type": "Vector3"
            },
            "example": [
                "\ntransform.position = ltPath.point( 0.6f );"
            ],
            "class": "LTBezierPath"
        },
        {
            "file": "LeanTween.cs",
            "line": 1046,
            "description": "Place an object along a certain point on the path (facing the direction perpendicular to the path)",
            "itemtype": "method",
            "name": "place",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "example": [
                "\nltPath.place( transform, 0.6f );"
            ],
            "class": "LTBezierPath"
        },
        {
            "file": "LeanTween.cs",
            "line": 1059,
            "description": "Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path",
            "itemtype": "method",
            "name": "place",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                },
                {
                    "name": "rotation:Vector3",
                    "description": "the direction in which to place the transform ex: Vector3.up",
                    "type": "Vector3"
                }
            ],
            "example": [
                "\nltPath.place( transform, 0.6f, Vector3.left );"
            ],
            "class": "LTBezierPath"
        },
        {
            "file": "LeanTween.cs",
            "line": 1076,
            "description": "Place an object along a certain point on the path (facing the direction perpendicular to the path) - Local Space, not world-space",
            "itemtype": "method",
            "name": "placeLocal",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "example": [
                "\nltPath.placeLocal( transform, 0.6f );"
            ],
            "class": "LTBezierPath"
        },
        {
            "file": "LeanTween.cs",
            "line": 1089,
            "description": "Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path - Local Space, not world-space",
            "itemtype": "method",
            "name": "placeLocal",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                },
                {
                    "name": "rotation:Vector3",
                    "description": "the direction in which to place the transform ex: Vector3.up",
                    "type": "Vector3"
                }
            ],
            "example": [
                "\nltPath.placeLocal( transform, 0.6f, Vector3.left );"
            ],
            "class": "LTBezierPath"
        },
        {
            "file": "LeanTween.cs",
            "line": 1199,
            "description": "Retrieve a point along a path",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "Vector3 position of the point along the path",
                "type": "Vector3"
            },
            "example": [
                "\ntransform.position = ltSpline.point( 0.6f );"
            ],
            "class": "LTSpline"
        },
        {
            "file": "LeanTween.cs",
            "line": 1215,
            "description": "Place an object along a certain point on the path (facing the direction perpendicular to the path)",
            "itemtype": "method",
            "name": "place",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "example": [
                "\nltPath.place( transform, 0.6f );"
            ],
            "class": "LTSpline"
        },
        {
            "file": "LeanTween.cs",
            "line": 1228,
            "description": "Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path",
            "itemtype": "method",
            "name": "place",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                },
                {
                    "name": "rotation:Vector3",
                    "description": "the direction in which to place the transform ex: Vector3.up",
                    "type": "Vector3"
                }
            ],
            "example": [
                "\nltPath.place( transform, 0.6f, Vector3.left );"
            ],
            "class": "LTSpline"
        },
        {
            "file": "LeanTween.cs",
            "line": 1245,
            "description": "Place an object along a certain point on the path (facing the direction perpendicular to the path) - Local Space, not world-space",
            "itemtype": "method",
            "name": "placeLocal",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                }
            ],
            "example": [
                "\nltPath.placeLocal( transform, 0.6f );"
            ],
            "class": "LTSpline"
        },
        {
            "file": "LeanTween.cs",
            "line": 1258,
            "description": "Place an object along a certain point on the path, with it facing a certain direction perpendicular to the path - Local Space, not world-space",
            "itemtype": "method",
            "name": "placeLocal",
            "params": [
                {
                    "name": "transform:Transform",
                    "description": "the transform of the object you wish to place along the path",
                    "type": "Transform"
                },
                {
                    "name": "ratio:float",
                    "description": "ratio of the point along the path you wish to receive (0-1)",
                    "type": "Float"
                },
                {
                    "name": "rotation:Vector3",
                    "description": "the direction in which to place the transform ex: Vector3.up",
                    "type": "Vector3"
                }
            ],
            "example": [
                "\nltPath.placeLocal( transform, 0.6f, Vector3.left );"
            ],
            "class": "LTSpline"
        },
        {
            "file": "LeanTween.cs",
            "line": 1386,
            "description": "This line is optional. Here you can specify the maximum number of tweens you will use (the default is 400).  This must be called before any use of LeanTween is made for it to be effective.",
            "itemtype": "method",
            "name": "LeanTween.init",
            "params": [
                {
                    "name": "maxSimultaneousTweens:int",
                    "description": "The maximum number of tweens you will use, make sure you don't go over this limit, otherwise the code will throw an error",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n  LeanTween.init( 800 );"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2185,
            "description": "Cancel all tweens that are currently targeting the gameObject",
            "itemtype": "method",
            "name": "LeanTween.cancel",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "gameObject whose tweens you wish to cancel",
                    "type": "GameObject"
                }
            ],
            "example": [
                " LeanTween.move( gameObject, new Vector3(0f,1f,2f), 1f); <br>\nLeanTween.cancel( gameObject );"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2202,
            "description": "Cancel a specific tween with the provided id",
            "itemtype": "method",
            "name": "LeanTween.cancel",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "gameObject whose tweens you want to cancel",
                    "type": "GameObject"
                },
                {
                    "name": "id:int",
                    "description": "unique id that represents that tween",
                    "type": "Float"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2220,
            "description": "Cancel a specific tween with the provided id",
            "itemtype": "method",
            "name": "LeanTween.cancel",
            "params": [
                {
                    "name": "ltRect:LTRect",
                    "description": "LTRect object whose tweens you want to cancel",
                    "type": "LTRect"
                },
                {
                    "name": "id:int",
                    "description": "unique id that represents that tween",
                    "type": "Float"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2276,
            "description": "Pause all tweens for a GameObject",
            "itemtype": "method",
            "name": "LeanTween.pause",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "GameObject whose tweens you want to pause",
                    "type": "GameObject"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2296,
            "description": "Resume a specific tween",
            "itemtype": "method",
            "name": "LeanTween.resume",
            "params": [
                {
                    "name": "id:int",
                    "description": "Id of the tween you want to resume ex: int id = LeanTween.MoveX(gameObject, 5, 1.0).id;",
                    "type": "Int"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2310,
            "description": "Resume all the tweens on a GameObject",
            "itemtype": "method",
            "name": "LeanTween.resume",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "GameObject whose tweens you want to resume",
                    "type": "GameObject"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2324,
            "description": "Test whether or not a tween is active on a GameObject",
            "itemtype": "method",
            "name": "LeanTween.isTweening",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "GameObject that you want to test if it is tweening",
                    "type": "GameObject"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2339,
            "description": "Test whether or not a tween is active or not",
            "itemtype": "method",
            "name": "LeanTween.isTweening",
            "params": [
                {
                    "name": "id:int",
                    "description": "id of the tween that you want to test if it is tweening\n&nbsp;&nbsp;<i>Example:</i><br>\n&nbsp;&nbsp;int id = LeanTween.moveX(gameObject, 1f, 3f).id;<br>\n&nbsp;&nbsp;if(LeanTween.isTweening( id ))<br>\n&nbsp;&nbsp; &nbsp;&nbsp;Debug.Log(\"I am tweening!\");<br>",
                    "type": "GameObject"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2359,
            "description": "Test whether or not a tween is active on a LTRect",
            "itemtype": "method",
            "name": "LeanTween.isTweening",
            "params": [
                {
                    "name": "ltRect:LTRect",
                    "description": "LTRect that you want to test if it is tweening",
                    "type": "LTRect"
                }
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2443,
            "description": "Fade a gameobject's material to a certain alpha value. The material's shader needs to support alpha. <a href=\"http://owlchemylabs.com/content/\">Owl labs has some excellent efficient shaders</a>.",
            "itemtype": "method",
            "name": "LeanTween.alpha",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to fade",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "the final alpha value (0-1)",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time with which to fade the object",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.alpha(gameObject, 1f, 1f) .setDelay(1f);"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2458,
            "description": "Fade a GUI Object",
            "itemtype": "method",
            "name": "LeanTween.alpha",
            "params": [
                {
                    "name": "ltRect:LTRect",
                    "description": "LTRect that you wish to fade",
                    "type": "LTRect"
                },
                {
                    "name": "to:float",
                    "description": "the final alpha value (0-1)",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time with which to fade the object",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.alpha(ltRect, 1f, 1f) .setEase(LeanTweenType.easeInCirc);"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2474,
            "description": "This works by tweening the vertex colors directly.<br>\n<br>\nVertex-based coloring is useful because you avoid making a copy of your\nobject's material for each instance that needs a different color.<br>\n<br>\nA shader that supports vertex colors is required for it to work\n(for example the shaders in Mobile/Particles/)",
            "itemtype": "method",
            "name": "LeanTween.alphaVertex",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to alpha",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "The alpha value you wish to tween to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time with which to delay before calling the function",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2493,
            "description": "Change a gameobject's material to a certain color value. The material's shader needs to support color tinting. <a href=\"http://owlchemylabs.com/content/\">Owl labs has some excellent efficient shaders</a>.",
            "itemtype": "method",
            "name": "LeanTween.color",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to change the color",
                    "type": "GameObject"
                },
                {
                    "name": "to:Color",
                    "description": "the final color value ex: Color.Red, new Color(1.0f,1.0f,0.0f,0.8f)",
                    "type": "Color"
                },
                {
                    "name": "time:float",
                    "description": "The time with which to fade the object",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\nLeanTween.color(gameObject, Color.yellow, 1f) .setDelay(1f);"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2532,
            "description": "Move a GameObject to a certain location",
            "itemtype": "method",
            "name": "LeanTween.move",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "vec:Vector3",
                    "description": "to The final positin with which to move to",
                    "type": "Vector3"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                " LeanTween.move(gameObject, new Vector3(0f,-3f,5f), 2.0f) .setEase( LeanTweenType.easeOutQuad );"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2550,
            "description": "Move a GameObject along a set of bezier curves",
            "itemtype": "method",
            "name": "LeanTween.move",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "",
                    "description": "A set of points that define the curve(s) ex: Point1,Handle2,Handle1,Point2,...",
                    "type": "Vector3[]",
                    "optional": true
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Javascript:</i><br>\nLeanTween.move(gameObject, [Vector3(0,0,0),Vector3(1,0,0),Vector3(1,0,0),Vector3(1,0,1)], 2.0) .setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br><br>\n<i>C#:</i><br>\nLeanTween.move(gameObject, new Vector3[]{new Vector3(0f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,1f)}, 1.5f).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);;<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2574,
            "description": "Move a GameObject through a set of points",
            "itemtype": "method",
            "name": "LeanTween.moveSpline",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "",
                    "description": "A set of points that define the curve(s) ex: ControlStart,Pt1,Pt2,Pt3,.. ..ControlEnd",
                    "type": "Vector3[]",
                    "optional": true
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Javascript:</i><br>\nLeanTween.moveSpline(gameObject, [Vector3(0,0,0),Vector3(1,0,0),Vector3(1,0,0),Vector3(1,0,1)], 2.0) .setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br><br>\n<i>C#:</i><br>\nLeanTween.moveSpline(gameObject, new Vector3[]{new Vector3(0f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,1f)}, 1.5f).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2595,
            "description": "Move a GameObject through a set of points, in local space",
            "itemtype": "method",
            "name": "LeanTween.moveSplineLocal",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "",
                    "description": "A set of points that define the curve(s) ex: ControlStart,Pt1,Pt2,Pt3,.. ..ControlEnd",
                    "type": "Vector3[]",
                    "optional": true
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Javascript:</i><br>\nLeanTween.moveSpline(gameObject, [Vector3(0,0,0),Vector3(1,0,0),Vector3(1,0,0),Vector3(1,0,1)], 2.0) .setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br><br>\n<i>C#:</i><br>\nLeanTween.moveSpline(gameObject, new Vector3[]{new Vector3(0f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,0f),new Vector3(1f,0f,1f)}, 1.5f).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2616,
            "description": "Move a GUI Element to a certain location",
            "itemtype": "method",
            "name": "LeanTween.move (GUI)",
            "params": [
                {
                    "name": "ltRect:LTRect",
                    "description": "ltRect LTRect object that you wish to move",
                    "type": "LTRect"
                },
                {
                    "name": "vec:Vector2",
                    "description": "to The final position with which to move to (pixel coordinates)",
                    "type": "Vector2"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2633,
            "description": "Move a GameObject along the x-axis",
            "itemtype": "method",
            "name": "LeanTween.moveX",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "gameObject Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "to The final position with which to move to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the move in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2646,
            "description": "Move a GameObject along the y-axis",
            "itemtype": "method",
            "name": "LeanTween.moveY",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "float",
                    "description": "to The final position with which to move to",
                    "type": "Float"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the move in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2659,
            "description": "Move a GameObject along the z-axis",
            "itemtype": "method",
            "name": "LeanTween.moveZ",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "float",
                    "description": "to The final position with which to move to",
                    "type": "Float"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the move in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2672,
            "description": "Move a GameObject to a certain location relative to the parent transform.",
            "itemtype": "method",
            "name": "LeanTween.moveLocal",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "Vector3",
                    "description": "to The final positin with which to move to",
                    "type": "Vector3"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                },
                {
                    "name": "Hashtable",
                    "description": "optional Hashtable where you can pass <a href=\"#optional\">optional items</a>.",
                    "type": "Hashtable"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2686,
            "description": "Move a GameObject along a set of bezier curves, in local space",
            "itemtype": "method",
            "name": "LeanTween.moveLocal",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to move",
                    "type": "GameObject"
                },
                {
                    "name": "",
                    "description": "A set of points that define the curve(s) ex: Point1,Handle1,Handle2,Point2,...",
                    "type": "Vector3[]",
                    "optional": true
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Javascript:</i><br>\nLeanTween.move(gameObject, [Vector3(0,0,0),Vector3(1,0,0),Vector3(1,0,0),Vector3(1,0,1)], 2.0).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br><br>\n<i>C#:</i><br>\nLeanTween.move(gameObject, new Vector3[]{Vector3(0f,0f,0f),Vector3(1f,0f,0f),Vector3(1f,0f,0f),Vector3(1f,0f,1f)}).setEase(LeanTweenType.easeOutQuad).setOrientToPath(true);<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2722,
            "description": "Rotate a GameObject, to values are in passed in degrees",
            "itemtype": "method",
            "name": "LeanTween.rotate",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "Vector3",
                    "description": "to The final rotation with which to rotate to",
                    "type": "Vector3"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                " LeanTween.rotate(cube, new Vector3(180f,30f,0f), 1.5f);"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2737,
            "description": "Rotate a GUI element (using an LTRect object), to a value that is in degrees",
            "itemtype": "method",
            "name": "LeanTween.rotate",
            "params": [
                {
                    "name": "ltRect:LTRect",
                    "description": "LTRect that you wish to rotate",
                    "type": "LTRect"
                },
                {
                    "name": "to:float",
                    "description": "The final rotation with which to rotate to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                },
                {
                    "name": "optional:Array",
                    "description": "Object Array where you can pass <a href=\"#optional\">optional items</a>.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                " \nif(GUI.Button(buttonRect.rect, \"Rotate\"))<br>\n\tLeanTween.rotate( buttonRect4, 150.0f, 1.0f).setEase(LeanTweenType.easeOutElastic);<br>\nGUI.matrix = Matrix4x4.identity;<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2755,
            "description": "Rotate a GameObject in the objects local space (on the transforms localEulerAngles object)",
            "itemtype": "method",
            "name": "LeanTween.rotateLocal",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "to:Vector3",
                    "description": "The final rotation with which to rotate to",
                    "type": "Vector3"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2768,
            "description": "Rotate a GameObject only on the X axis",
            "itemtype": "method",
            "name": "LeanTween.rotateX",
            "params": [
                {
                    "name": "GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "The final x-axis rotation with which to rotate",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2781,
            "description": "Rotate a GameObject only on the Y axis",
            "itemtype": "method",
            "name": "LeanTween.rotateY",
            "params": [
                {
                    "name": "GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "The final y-axis rotation with which to rotate",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2794,
            "description": "Rotate a GameObject only on the Z axis",
            "itemtype": "method",
            "name": "LeanTween.rotateZ",
            "params": [
                {
                    "name": "GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "to:float",
                    "description": "The final z-axis rotation with which to rotate",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2807,
            "description": "Rotate a GameObject around a certain Axis (the best method to use when you want to rotate beyond 180 degrees)",
            "itemtype": "method",
            "name": "LeanTween.rotateAround",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "vec:Vector3",
                    "description": "axis in which to rotate around ex: Vector3.up",
                    "type": "Vector3"
                },
                {
                    "name": "degrees:float",
                    "description": "the degrees in which to rotate",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Example:</i><br>\nLeanTween.rotateAround ( gameObject, Vector3.left, 90f,  1f );"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2824,
            "description": "Rotate a GameObject around a certain Axis in Local Space (the best method to use when you want to rotate beyond 180 degrees)",
            "itemtype": "method",
            "name": "LeanTween.rotateAroundLocal",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to rotate",
                    "type": "GameObject"
                },
                {
                    "name": "vec:Vector3",
                    "description": "axis in which to rotate around ex: Vector3.up",
                    "type": "Vector3"
                },
                {
                    "name": "degrees:float",
                    "description": "the degrees in which to rotate",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the rotation in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Example:</i><br>\nLeanTween.rotateAround ( gameObject, Vector3.left, 90f,  1f );"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2841,
            "description": "Scale a GameObject to a certain size",
            "itemtype": "method",
            "name": "LeanTween.scale",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "gameObject Gameobject that you wish to scale",
                    "type": "GameObject"
                },
                {
                    "name": "vec:Vector3",
                    "description": "to The size with which to tween to",
                    "type": "Vector3"
                },
                {
                    "name": "time:float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2854,
            "description": "Scale a GUI Element to a certain width and height",
            "itemtype": "method",
            "name": "LeanTween.scale (GUI)",
            "params": [
                {
                    "name": "LTRect",
                    "description": "ltRect LTRect object that you wish to move",
                    "type": "LTRect"
                },
                {
                    "name": "Vector2",
                    "description": "to The final width and height to scale to (pixel based)",
                    "type": "Vector2"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Example Javascript: </i><br>\nvar bRect:LTRect = new LTRect( 0, 0, 100, 50 );<br>\nLeanTween.scale( bRect, Vector2(bRect.rect.width, bRect.rect.height) * 1.3, 0.25 ).setEase(LeanTweenType.easeOutBounce);<br>\nfunction OnGUI(){<br>\n&nbsp; if(GUI.Button(bRect.rect, \"Scale\")){ }<br>\n}<br>\n<br>\n<i>Example C#: </i> <br>\nLTRect bRect = new LTRect( 0f, 0f, 100f, 50f );<br>\nLeanTween.scale( bRect, new Vector2(150f,75f), 0.25f ).setEase(LeanTweenType.easeOutBounce);<br>\nvoid OnGUI(){<br>\n&nbsp; if(GUI.Button(bRect.rect, \"Scale\")){ }<br>\n}<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2881,
            "description": "Scale a GameObject to a certain size along the x-axis only",
            "itemtype": "method",
            "name": "LeanTween.scaleX",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to scale",
                    "type": "GameObject"
                },
                {
                    "name": "scaleTo:float",
                    "description": "the size with which to scale to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "the time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2894,
            "description": "Scale a GameObject to a certain size along the y-axis only",
            "itemtype": "method",
            "name": "LeanTween.scaleY",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to scale",
                    "type": "GameObject"
                },
                {
                    "name": "scaleTo:float",
                    "description": "the size with which to scale to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "the time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2907,
            "description": "Scale a GameObject to a certain size along the z-axis only",
            "itemtype": "method",
            "name": "LeanTween.scaleZ",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to scale",
                    "type": "GameObject"
                },
                {
                    "name": "scaleTo:float",
                    "description": "the size with which to scale to",
                    "type": "Float"
                },
                {
                    "name": "time:float",
                    "description": "the time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2920,
            "description": "Tween any particular value, it does not need to be tied to any particular type or GameObject",
            "itemtype": "method",
            "name": "LeanTween.value (float)",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject GameObject with which to tie the tweening with. This is only used when you need to cancel this tween, it does not actually perform any operations on this gameObject",
                    "type": "GameObject"
                },
                {
                    "name": "callOnUpdate:Action<float>",
                    "description": "The function that is called on every Update frame, this function needs to accept a float value ex: function updateValue( float val ){ }",
                    "type": "Action<float>"
                },
                {
                    "name": "float",
                    "description": "from The original value to start the tween from",
                    "type": "Float"
                },
                {
                    "name": "float",
                    "description": "to The value to end the tween on",
                    "type": "Float"
                },
                {
                    "name": "float",
                    "description": "time The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Example Javascript: </i><br>\nLeanTween.value( gameObject, updateValueExampleCallback, 180f, 270f, 1f).setEase(LeanTweenType.easeOutElastic);<br>\nfunction updateValueExampleCallback( val:float ){<br>\n&nbsp; Debug.Log(\"tweened value:\"+val+\" set this to whatever variable you are tweening...\");<br>\n}<br>\n<br>\n<i>Example C#: </i> <br>\nLeanTween.value( gameObject, updateValueExampleCallback, 180f, 270f, 1f).setEase(LeanTweenType.easeOutElastic);<br>\nvoid updateValueExampleCallback( float val ){<br>\n&nbsp; Debug.Log(\"tweened value:\"+val+\" set this to whatever variable you are tweening...\");<br>\n}<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2948,
            "description": "Tween from one color to another",
            "itemtype": "method",
            "name": "LeanTween.value (Color)",
            "params": [
                {
                    "name": "GameObject",
                    "description": "gameObject GameObject with which to tie the tweening with. This is only used when you need to cancel this tween, it does not actually perform any operations on this gameObject",
                    "type": "GameObject"
                },
                {
                    "name": "callOnUpdate:Action<Color>",
                    "description": "The function that is called on every Update frame, this function needs to accept a color value ex: function updateValue( Color val ){ }",
                    "type": "Action<Color>"
                },
                {
                    "name": "Color",
                    "description": "from The original value to start the tween from",
                    "type": "Color"
                },
                {
                    "name": "Color",
                    "description": "to The value to end the tween on",
                    "type": "Color"
                },
                {
                    "name": "Color",
                    "description": "time The time to complete the tween in",
                    "type": "Color"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "example": [
                "\n<i>Example Javascript: </i><br>\nLeanTween.value( gameObject, updateValueExampleCallback, Color.red, Color.green, 1f).setEase(LeanTweenType.easeOutElastic);<br>\nfunction updateValueExampleCallback( val:Color ){<br>\n&nbsp; Debug.Log(\"tweened color:\"+val+\" set this to whatever variable you are tweening...\");<br>\n}<br>\n<br>\n<i>Example C#: </i> <br>\nLeanTween.value( gameObject, updateValueExampleCallback, Color.red, Color.green, 1f).setEase(LeanTweenType.easeOutElastic);<br>\nvoid updateValueExampleCallback( Color val ){<br>\n&nbsp; Debug.Log(\"tweened color:\"+val+\" set this to whatever variable you are tweening...\");<br>\n}<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2977,
            "description": "Tween any particular value (Vector3), this could be used to tween an arbitrary value like a material color",
            "itemtype": "method",
            "name": "LeanTween.value (Vector3)",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to attach the tween to",
                    "type": "GameObject"
                },
                {
                    "name": "callOnUpdate:Action<Vector3>",
                    "description": "The function that is called on every Update frame, this function needs to accept a float value ex: function updateValue( Vector3 val ){ }",
                    "type": "Action<Vector3>"
                },
                {
                    "name": "from:Vector3",
                    "description": "The original value to start the tween from",
                    "type": "Float"
                },
                {
                    "name": "to:Vector3",
                    "description": "The final Vector3 with which to tween to",
                    "type": "Vector3"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 2992,
            "description": "Tween any particular value (float)",
            "itemtype": "method",
            "name": "LeanTween.value (float,object)",
            "params": [
                {
                    "name": "gameObject:GameObject",
                    "description": "Gameobject that you wish to attach the tween to",
                    "type": "GameObject"
                },
                {
                    "name": "callOnUpdate:Action<float,object>",
                    "description": "The function that is called on every Update frame, this function needs to accept a float value ex: function updateValue( Vector3 val, object obj ){ }",
                    "type": "Action<float,object>"
                },
                {
                    "name": "from:Vector3",
                    "description": "The original value to start the tween from",
                    "type": "Float"
                },
                {
                    "name": "to:Vector3",
                    "description": "The final Vector3 with which to tween to",
                    "type": "Vector3"
                },
                {
                    "name": "time:float",
                    "description": "The time to complete the tween in",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "LTDescr an object that distinguishes the tween",
                "type": "LTDescr"
            },
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 3861,
            "description": "Add a listener method to be called when the appropriate LeanTween.dispatchEvent is called",
            "itemtype": "method",
            "name": "LeanTween.addListener",
            "params": [
                {
                    "name": "caller:GameObject",
                    "description": "the gameObject the listener is attached to",
                    "type": "GameObject"
                },
                {
                    "name": "eventId:int",
                    "description": "a unique int that describes the event (best to use an enum)",
                    "type": "Int"
                },
                {
                    "name": "callback:System.Action<LTEvent>",
                    "description": "the method to call when the event has been dispatched",
                    "type": "System.Action<LTEvent>"
                }
            ],
            "example": [
                "\nLeanTween.addListener(gameObject, (int)MyEvents.JUMP, jumpUp);<br>\n<br>\nvoid jumpUp( LTEvent e ){ Debug.Log(\"jump!\"); }<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 3902,
            "description": "Remove an event listener you have added",
            "itemtype": "method",
            "name": "LeanTween.removeListener",
            "params": [
                {
                    "name": "caller:GameObject",
                    "description": "the gameObject the listener is attached to",
                    "type": "GameObject"
                },
                {
                    "name": "eventId:int",
                    "description": "a unique int that describes the event (best to use an enum)",
                    "type": "Int"
                },
                {
                    "name": "callback:System.Action<LTEvent>",
                    "description": "the method that was specified to call when the event has been dispatched",
                    "type": "System.Action<LTEvent>"
                }
            ],
            "example": [
                "\nLeanTween.removeListener(gameObject, (int)MyEvents.JUMP, jumpUp);<br>\n<br>\nvoid jumpUp( LTEvent e ){ }<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 3925,
            "description": "Tell the added listeners that you are dispatching the event",
            "itemtype": "method",
            "name": "LeanTween.dispatchEvent",
            "params": [
                {
                    "name": "eventId:int",
                    "description": "a unique int that describes the event (best to use an enum)",
                    "type": "Int"
                }
            ],
            "example": [
                "\nLeanTween.dispatchEvent( (int)MyEvents.JUMP );<br>"
            ],
            "class": "LeanTween"
        },
        {
            "file": "LeanTween.cs",
            "line": 3936,
            "description": "Tell the added listeners that you are dispatching the event",
            "itemtype": "method",
            "name": "LeanTween.dispatchEvent",
            "params": [
                {
                    "name": "eventId:int",
                    "description": "a unique int that describes the event (best to use an enum)",
                    "type": "Int"
                },
                {
                    "name": "data:object",
                    "description": "Pass data to the listener, access it from the listener with *.data on the LTEvent object",
                    "type": "Object"
                }
            ],
            "example": [
                "\nLeanTween.dispatchEvent( (int)MyEvents.JUMP, transform );<br>\n<br>\nvoid jumpUp( LTEvent e ){<br>\n&nbsp; Transform tran = (Transform)e.data;<br>\n}<br>"
            ],
            "class": "LeanTween"
        }
    ],
    "warnings": []
}